{
  "openapi": "3.0.3",
  "info": {
    "title": "Qualtics API",
    "description": "",
    "contact": {
      "name": "Support",
      "url": "https://www.qualtrics.com/support/"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.0"
  },
  "servers": [{
      "url": "/"
    
  }
  ],
  "paths": {
    "/ex-projects/{projectId}/participants/{participantId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Specific Participant",
        "description": "Retrieves the specified participant in the specified EX project.",
        "operationId": "getParticipantByIdInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "ID of the Participant",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/participants": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Participants [Deprecated]",
        "description": "Please use the POST API instead. Gets all participants, in the specified EX project.\n\n<!-- theme: danger -->\n> ## Preview Functionality\n> This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.",
        "operationId": "getParticipantsInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether metadata should be included or not (default).",
            "in": "query",
            "name": "includeMetadata",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "The start position for pagination. Comes back as response body of the previous call, if there is more paginated data",
            "in": "query",
            "name": "skipToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of items to return in a given response.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 25,
              "default": 25
            }
          },
          {
            "description": "Whether participant data should be included or not (default).",
            "in": "query",
            "name": "includeParticipantData",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Unique Identifier of a specific participant.",
            "in": "query",
            "name": "uniqueIdentifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchGetParticipantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Participants Post",
        "description": "Retrieves all participants in the specified EX project.\n\n<!-- theme: warning -->\n>#### Only use `skipToken` parameter after first request\n>\n>You should only use the `skipToken` parameter when it is returned in the response body after your first call to the API. Use the `skipToken` parameter to paginate through the response.",
        "operationId": "getParticipantsInProjectPost",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether metadata should be included or not (default).",
            "in": "query",
            "name": "includeMetadata",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Maximum number of items to return in a given response.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 25,
              "default": 25
            }
          },
          {
            "description": "Whether participant data for EE project or subject data for 360 project should be included or not (default).",
            "in": "query",
            "name": "includeParticipantData",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantsSearchRequest"
              },
              "examples": {
                "Example": {
                  "value": {
                    "uniqueIdentifier": "uniqueIdentifier123"
                  }
                }
              }
            }
          },
          "description": "A uniqueIdentifier can be provided to search for a specific participant"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchGetParticipantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-participants": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Import Participants",
        "description": "Start addition of new or existing participants to the specified EX project. Existing participants should be in employee directory based on `uniqueIdentifier`. If new participants are added, they are also added to employee directory.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",

        "operationId": "importParticipantsInProject",
        "parameters": [{
          "name": "projectId",
          "in": "path",
          "description": "ID of the EX project",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantImportBody"
              },
              "examples": {
                "json example": {
                  "value": {
                    "participants": [{
                      "firstName": "f1",
                      "lastName": "l1",
                      "email": "f1@qualt.com",
                      "username": "f1username",
                      "uniqueIdentifier": "f1@qualt.com",
                      "metadata": {
                        "key1": "val11",
                        "key2": "val22"
                      }
                    }]
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/InputFile"
              }
            }
          },
          "description": "You can send a json object directly in an `application/json` call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a `.csv` file and upload the file as part of the request. To send a file, you'll need to make the application type `multipart/form-data`, and the file will need to look like the example below: \n\n```\nUnique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2\nf1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21\nf2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22\n```\n\nAdditionally, in order to send a file, you will need to include in the form data a parameter called `file` whose value is the path to your local file, like below: \n\n``` shell\ncurl --location --request POST 'https://ca1.qualtrics.com/ex-projects/<your project id>/import-participants \\\n--header 'Content-Type: multipart/form-data' \\\n--header 'Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9' \\\n--form 'file=\"myParticipants.csv\"'\n```"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "PIJ_abc123"
                    }
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-participants/{jobId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Import Status",
        "description": "Retrieves the status of the participants addition or updates job in the specified EX project.",

        "operationId": "getImportParticipantsJobInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the job for which you want the status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-participants/results/{resultId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Results for Project Import Participants Job",
        "description": "Returns the results of the participants addition or updates job in the specified EX project.",
        "operationId": "getImportParticipantsJobResultInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Import Participants Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-subjects": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Import EX 360 Subjects",
        "description": "Start addition of new or existing subjects to the specified EX 360 project. Existing subjects should be in employee directory based on `uniqueIdentifier`. If new subjects are added, they are also added to employee directory.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",
        "operationId": "importSubjectsInProject",
        "parameters": [{
          "name": "projectId",
          "in": "path",
          "description": "ID of the EX 360 project",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectImportBody"
              },
              "examples": {
                "json example": {
                  "value": {
                    "subjects": [{
                      "firstName": "f1",
                      "lastName": "l1",
                      "email": "f1@qualt.com",
                      "username": "f1username",
                      "uniqueIdentifier": "f1@qualt.com",
                      "metadata": {
                        "key1": "val11",
                        "key2": "val22"
                      }
                    }]
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/InputFile"
              }
            }
          },
          "description": "You can send a JSON object directly in an `application/json` call for importing subjects. When importing with JSON, only metadata fields that are common across all imported subjects will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you'll need to make the application type `multipart/form-data`, and the file will need to look like the example below: \n\n```\nUnique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2\nf1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21\nf2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22\n```\n\nAdditionally, in order to send a file, you will need to include in the form data a parameter called `file` whose value is the path to your local file, like below: \n\n``` shell\ncurl --location --request POST 'https://ca1.qualtrics.com/ex-projects/<your project id>/import-subjects \\\n--header 'Content-Type: multipart/form-data' \\\n--header 'Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9' \\\n--form 'file=\"mySubjects.csv\"'\n```\nFile size is limited to 100 MB."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "NIJ_abc123"
                    }
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-subjects/{jobId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Import EX 360 Subjects Status",
        "description": "Retrieves the status of the subjects addition or updates job in the specified EX 360 project.",

        "operationId": "getImportSubjectsJobInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX 360 project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the job for which you want the status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-subjects/results/{resultId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Results for Project Import EX 360 Subjects Job",
        "description": "Retrieves the results of the subjects addition or updates job in the specified EX 360 project.",
        "operationId": "getImportSubjectsJobResultInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX 360 project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Import EX 360 Subjects Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-evaluators": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Import EX 360 Evaluators",
        "description": "Start addition of new or existing evaluators to the specified EX 360 project. Existing evaluators should be in employee directory based on `uniqueIdentifier`. If new evaluators are added, they are also added to employee directory.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",
        "operationId": "importEvaluatorsInProject",
        "parameters": [{
          "name": "projectId",
          "in": "path",
          "description": "ID of the EX 360 project",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluatorImportBody"
              },
              "examples": {
                "json example": {
                  "value": {
                    "evaluators": [{
                      "firstName": "f1",
                      "lastName": "l1",
                      "evaluatorEmail": "f1@qualt.com",
                      "username": "f1username",
                      "evaluatorUniqueIdentifier": "f1@qualt.com",
                      "metadata": {
                        "key1": "val11",
                        "key2": "val22"
                      }
                    }]
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/InputFile"
              }
            }
          },
          "description": "You can send a JSON object directly in an `application/json` call for importing evaluators. When importing with JSON, only metadata fields that are common across all imported evaluators will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you'll need to make the application type `multipart/form-data`, and the file will need to look like the example below: \n\n```\nEvaluatorUniqueIdentifier,FirstName,LastName,EvaluatorEmail,Username,Metadata1,Metadata2\nf1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21\nf2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22\n```\n\nAdditionally, in order to send a file, you will need to include in the form data a parameter called `file` whose value is the path to your local file, like below: \n\n``` shell\ncurl --location --request POST 'https://ca1.qualtrics.com/ex-projects/<your project id>/import-evaluators \\\n--header 'Content-Type: multipart/form-data' \\\n--header 'Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9' \\\n--form 'file=\"myEvaluators.csv\"'\n```\nFile size is limited to 100 MB."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "NIJ_abc123"
                    }
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-evaluators/{jobId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Import EX 360 Evaluators Status",
        "description": "Retrieves the status of the evaluators addition or updates job in the specified EX 360 project.",
        "operationId": "getImportEvaluatorsJobInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX 360 project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the job for which you want the status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/import-evaluators/results/{resultId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Results for Project Import EX 360 Evaluators Job",
        "description": "Retrieves the results of the evaluators addition or updates job in the specified EX 360 project.",
        "operationId": "getImportEvaluatorsJobResultInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX 360 project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Import EX 360 Evaluators Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-participants": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Copy Participants",
        "description": "Copy participants identified by given list of `uniqueIdentifier` from employee directory to project. Participant's metadata in employee directory is also copied into project.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",

        "operationId": "copyParticipantsInProject",
        "parameters": [{
          "name": "projectId",
          "in": "path",
          "description": "ID of the EX project",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniqueIdentifiers"
              },
              "examples": {
                "json example": {
                  "value": [
                    "f1@qualt.com",
                    "f2@qualt.com"
                  ]
                }
              }
            }
          },
          "description": "List of Unique Identifiers to be copied in the project."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "PMM_abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-participants/{jobId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Copy Participants Status",
        "description": "Retrieves the status of the copy participants job, in the specified EX project.",
        "operationId": "getCopyParticipantsJobInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of job for which you want status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-participants/results/{resultId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Results for Project Copy Participants Job",
        "description": "Retrieves the results of the copy participants job in the specified EX project.",
        "operationId": "getCopyParticipantsJobResultInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Copy Participants Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-subjects": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Copy EX 360 Subjects",
        "description": "Copy subjects identified by given list of `uniqueIdentifier` from employee directory to project. Subject's metadata in employee directory is also copied into project.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",
        "operationId": "copySubjectsInProject",
        "parameters": [{
          "name": "projectId",
          "in": "path",
          "description": "ID of the EX 360 project",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EX360CopyRequest"
              },
              "examples": {
                "json example": {
                  "value": {
                    "uniqueIdentifiers": [
                      "f1@qualt.com",
                      "f2@qualt.com"
                    ]
                  }
                }
              }
            }
          },
          "description": "List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "PMM_abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-subjects/{jobId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Copy EX 360 Subjects Status",
        "description": "Retrieves the status of the copy subjects job in the specified EX 360 project.",
        "operationId": "getCopySubjectsJobInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX 360 project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of job for which you want status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-subjects/results/{resultId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Results for Copy EX 360 Subjects Job",
        "description": "Retrieves the results of the copy subjects job in the specified EX 360 project.",

        "operationId": "getCopySubjectsJobResultInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX 360 project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Copy EX 360 Subjects API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-evaluators": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Copy EX 360 Evaluators",
        "description": "Copy evaluators identified by given list of `uniqueIdentifier` from employee directory to project. Evaluator's metadata in employee directory is also copied into project.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",
        "operationId": "copyEvaluatorsInProject",
        "parameters": [{
          "name": "projectId",
          "in": "path",
          "description": "ID of the EX 360 project",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EX360CopyRequest"
              },
              "examples": {
                "json example": {
                  "value": {
                    "uniqueIdentifiers": [
                      "f1@qualt.com",
                      "f2@qualt.com"
                    ]
                  }
                }
              }
            }
          },
          "description": "List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "PMM_abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-evaluators/{jobId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Copy EX 360 Evaluators Status",
        "description": "Retrieves the status of the copy evaluators job in the specified EX 360 project.",

        "operationId": "getCopyEvaluatorsJobInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX 360 project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of job for which you want status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/copy-evaluators/results/{resultId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Results for Copy EX 360 Evaluators Job",
        "description": "Retrieves the results of the copy evaluators job in the specified EX 360 project.",

        "operationId": "getCopyEvaluatorsJobResultInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX 360 project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Copy EX 360 Evaluators API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/delete-participants": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Participants",
        "description": "Start participants deletion from the specified EX project.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n<!-- theme: warning -->\n> ## Including More Than 25,000 Participant IDs Returns `HTTP 413` Error\n> Including more than 25,000 Participant IDs in a request will return a `HTTP 413 Request Entity Too Large` error. \n\n<!-- theme: warning -->\n> ## Maximum File Size is 10 MB\n> Maximum file size for upload is 10 MB. \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",

        "operationId": "deleteParticipantsInProject",
        "parameters": [{
          "name": "projectId",
          "in": "path",
          "description": "ID of the EX project",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniqueIdentifiers"
              },
              "examples": {
                "json example": {
                  "value": [
                    "f1@qualt.com",
                    "f2@qualt.com"
                  ]
                }
              }
            }
          },
          "description": "List of Unique Identifiers of participants to delete."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "PDJ_abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/delete-participants/{jobId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Delete Participants Status",
        "description": "Retrieves the status of the delete participants job in the specified EX project.",

        "operationId": "getDeleteParticipantsJobInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the job for which you want status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/delete-participants/results/{resultId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Results for Project Delete Participants Job",
        "description": "Retrieves the results of the delete participants job in the specified EX project.",

        "operationId": "getDeleteParticipantsJobResultInProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "ID of the EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Delete Participants Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/export-participants": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Export Participants",
        "description": "Start participants export from the specified EX project.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",

        "operationId": "exportParticipantsFromProject",
        "parameters": [{
          "name": "projectId",
          "in": "path",
          "description": "Id of a specific EX project",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantExportRequest"
              },
              "examples": {
                "json example": {
                  "value": [{
                    "comparisonType": "text",
                    "metadataField": "string",
                    "value": "string",
                    "operator": "EQUAL_TO"
                  }]
                }
              }
            }
          },
          "description": "List of metadata filter for participants export."
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "SRCH_abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/export-participants/{jobId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Export Participants Status",
        "description": "Retrieves the status of the export participants job in the specified EX project.",

        "operationId": "getExportParticipantsJobFromProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "Id of a specific EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the job for which you want status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-projects/{projectId}/export-participants/results/{resultId}/file": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Results for EX project Export Participants Job",
        "description": "Retrieve the results of the participants export job in the specified EX project.",

        "operationId": "getExportParticipantsJobResultFromProject",
        "parameters": [{
            "name": "projectId",
            "in": "path",
            "description": "Id of a specific EX project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Export Participants Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Result as file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/participants/{participantId}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get Global Participant",
        "description": "Retrieves the specified participant in the global directory.",

        "operationId": "getParticipantByIdInDirectory",
        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use \"ex\" for employee directory, \"cx\" for CX directory and \"bx\" for BX directory",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bx",
                "cx",
                "ex"
              ]
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "ID of the Participant",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/participants": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get All Participants [Deprecated]",
        "description": "Please use the POST API instead. Gets all participants, in the specified Directory.\n\n<!-- theme: danger -->\n> ## Preview Functionality\n> This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.",

        "operationId": "getParticipantsInDirectory",
        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use ex for employee directory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether metadata should be included or not (default).",
            "in": "query",
            "name": "includeMetadata",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "The start position for pagination. Comes back as response body of the previous call, if there is more paginated data",
            "in": "query",
            "name": "skipToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of items to return in a given response.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            }
          },
          {
            "description": "Unique Identifier of a specific participant.",
            "in": "query",
            "name": "uniqueIdentifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchGetParticipantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Directories"
        ],
        "summary": "Get All Participants Post",
        "description": "Retrieves all participants in the specified directory.",

        "operationId": "getParticipantsInDirectoryPost",
        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use \"ex\" for employee directory, \"cx\" for CX directory and \"bx\" for BX directory",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bx",
                "cx",
                "ex"
              ]
            }
          },
          {
            "description": "Whether metadata should be included or not (default).",
            "in": "query",
            "name": "includeMetadata",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Maximum number of items to return in a given response.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantsSearchRequest"
              },
              "examples": {
                "Example": {
                  "value": {
                    "uniqueIdentifier": "uniqueIdentifier123",
                    "skipToken": "skipTokenValue"
                  }
                }
              }
            }
          },
          "description": "A uniqueIdentifier can be provided to search for a specific participant"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchGetParticipantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/import-participants": {
      "post": {
        "tags": [
          "Directories"
        ],
        "summary": "Import Participants",
        "description": "Start participants addition or updates to the specified employee directory.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).\n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",

        "operationId": "importParticipantsInDirectory",
        "parameters": [{
          "name": "directoryId",
          "in": "path",
          "description": "Use \"ex\" for employee directory, \"cx\" for CX directory and \"bx\" for BX directory",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "bx",
              "cx",
              "ex"
            ]
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantImportBody"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/InputFile"
              }
            }
          },
          "description": "You can send a json object directly in an `application/json` call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a `.csv` file and upload the file as part of the request. To send a file, you'll need to make the application type `multipart/form-data`. Additionally, in order to send a file, you will need to include in the form data a parameter called file whose value is the path to your local file, like below:\n\n```\nUnique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2\nf1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21\nf2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22\n```\n\nAdditionally, in order to send a file, you will need to include in the form data a parameter called `file` whose value is the path to your local file, like below: \n\n``` shell\ncurl --location --request POST 'https://ca1.qualtrics.com/employee-directories/{directoryId}/import-participants \\\n--header 'Content-Type: multipart/form-data' \\\n--header 'Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9' \\\n--form 'file=\"myParticipants.csv\"'\n```"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/import-participants/{jobId}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get Import Status for Directory Import",
        "description": "Retrieves the status of the participants addition or updates job in the specified employee directory.",

        "operationId": "getImportParticipantsJobInDirectory",
        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use \"ex\" for employee directory, \"cx\" for CX directory and \"bx\" for BX directory",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bx",
                "cx",
                "ex"
              ]
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the job for which you want status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/import-participants/results/{resultId}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get Results for Directory Import Participants Job",
        "description": "Retrieves the results of the participants addition or updates job in the specified employee directory.",

        "operationId": "getImportParticipantsJobResultInDirectory",
        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use \"ex\" for employee directory, \"cx\" for CX directory and \"bx\" for BX directory",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bx",
                "cx",
                "ex"
              ]
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Import Participants Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/delete-participants": {
      "post": {
        "tags": [
          "Directories"
        ],
        "summary": "Delete Participants",
        "description": "Start participants deletion, from the specified employee directory.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n>\n\n<!-- theme: warning -->\n> ## Including More Than 25,000 Participant IDs Returns `HTTP 413` Error\n> Including more than 25,000 Participant IDs in a request will return a `HTTP 413 Request Entity Too Large` error. \n\n<!-- theme: warning -->\n> ## Maximum File Size is 10 MB\n> Maximum file size for upload is 10 MB. \n\nThis API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). \n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",

        "operationId": "deleteParticipantsInDirectory",
        "parameters": [{
          "name": "directoryId",
          "in": "path",
          "description": "Use ex for employee directory",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniqueIdentifiers"
              },
              "examples": {
                "json example": {
                  "value": [
                    "f1@qualt.com",
                    "f2@qualt.com"
                  ]
                }
              }
            }
          },
          "description": "List of Unique Identifiers of participants to delete."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "PDJ_abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                },
                "examples": {
                  "Invalid Client": {
                    "value": {
                      "meta": {
                        "httpStatus": "401 - Unauthorized",
                        "error": {
                          "errorMessage": "invalid_client",
                          "errorCode": "AUTH_6.0"
                        },
                        "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/delete-participants/{jobId}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get Delete Participants Status",
        "description": "Retrieves the status of the delete participants job in the specified employee directory.",

        "operationId": "getDeleteParticipantsJobInDirectory",
        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use ex for employee directory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the job for which you want status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/delete-participants/results/{resultId}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get Results for Directory Delete Participants Job",
        "description": "Retrieves the results of the participants delete job in the specified employee directory.",

        "operationId": "getDeleteParticipantsJobResultInDirectory",
        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use ex for employee directory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Delete Participants Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/export-participants": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Export Participants",
        "description": "Start participants export from the specified employee directory.\n\n<!-- theme: warning -->\n> ## Starting More Than Ten Jobs Results in `HTTP 409` Error\n> This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). This API not support cx directory yet.\n\n## Processing Order of Jobs\nThe processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.\n\nHere is an example queue showing order of job processing based on the jobs' contexts and projects.  \n| Jobs                    | Process                                                                                             |\n|-------------------------|-----------------------------------------------------------------------------------------------------|\n| Job 1: Project A        |                                                                                                     |\n| Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     |\n| Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          |\n| Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they're in the same job context (Global Directory). |\n| Job 5: Project A        | Job 4 must finish before Job 5 can run—it has a different context than Global Directory.            |\n| Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |",

        "operationId": "exportParticipantsFromDirectory",
        "parameters": [{
          "name": "directoryId",
          "in": "path",
          "description": "Use ex for employee directory",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                },
                "examples": {
                  "json example": {
                    "value": {
                      "jobId": "SRCH_abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/export-participants/{jobId}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get Export Participants Status",
        "description": "Retrieves the status of the export participants job in the specified employee directory.",

        "operationId": "getExportParticipantsJobFromDirectory",
        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use ex for employee directory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the job for which you want status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employee-directories/{directoryId}/export-participants/results/{resultId}/file": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get Results for Directory Export Participants Job",
        "description": "Retrieves the results of the participants export job in the specified employee directory.\n\n<!-- theme: info -->\n> ### Size Limit\n>If your EX or CX directory exceeds 200,000 users or you are executing the file download from a region outside your datacenter, you may experience timeout errors in those cases. Please contact customer support.",
        "operationId": "getExportParticipantsJobResultFromDirectory",

        "parameters": [{
            "name": "directoryId",
            "in": "path",
            "description": "Use ex for employee directory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Result ID from the Export Participants Status API response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Result as file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ex-invitations/participants/{participantId}": {
      "get": {
        "tags": [
          "EX Invitations"
        ],
        "summary": "Get participant respondent status in projects by participant id",
        "description": "Show all ids of the projects that a participant has been involved in and has yet to complete",

        "operationId": "getRespondentStatusIncompleteProjectsByParticipantId",
        "parameters": [{
          "name": "participantId",
          "in": "path",
          "description": "Participant id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectIdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorResponse"
                }
              }
            }
          }
        }
      }
  },
  "/audit-events": {
    "get": {
      "tags": [
        "Audit events"
      ],
      "summary": "This returns all audit event types",
      "description": "This will return all audit event types",
      "operationId": "retrieveAuditEvents",
      "responses": {
        "200": {
          "description": "Retrieves a list of all audit events",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventListResponse"
              },
              "example": {
                "result": {
                  "elements": [{
                      "name": "user_page_individual_view",
                      "description": "A user has viewed a specific user",
                      "category": "Admin"
                    },
                    {
                      "name": "user_page_main_view",
                      "description": "A user has viewed the main landing page of the users tab",
                      "category": "Admin"
                    }
                  ]
                },
                "meta": {
                  "httpStatus": 200,
                  "requestId": "EX_123456789",
                  "notice": "Audit event API"
                }
              }
            }
          }
        },
        "500": {
          "description": "Unknown server error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 500,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "Unknown server error",
                  "errorCode": 500
                }
              }
            }
          }
        }
      }
    }
  },
  "/audit-exports": {
    "post": {
      "tags": [
        "Export"
      ],
      "summary": "Create a new export job",
      "description": "This will create a new export job to download audit event data",
      "operationId": "createExport",
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ExportRequestBody"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Export job created. This returns an export id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExportResponse"
              },
              "example": {
                "result": {
                  "id": "EX_123456789"
                },
                "meta": {
                  "httpStatus": 201,
                  "requestId": "EX_123456789",
                  "notice": "Audit event API"
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request: invalid input",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 400,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "Timestamp input is malformed",
                  "errorCode": 400
                }
              }
            }
          }
        },
        "500": {
          "description": "Unknown server error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 500,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "Unknown server error",
                  "errorCode": 500
                }
              }
            }
          }
        }
      }
    }
  },
  "/audit-exports/{exportId}": {
    "get": {
      "tags": [
        "Export"
      ],
      "summary": "Retrieves the status of an export job",
      "description": "Returns the status of an export job. Once the status is completed it will also return a file id to download the audit events",
      "operationId": "getExportById",
      "parameters": [{
        "name": "exportId",
        "in": "path",
        "description": "The id of the specific export to download",
        "required": true,
        "schema": {
          "type": "string"
        }
      }],
      "responses": {
        "200": {
          "description": "The progress of the audit export job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetExportByIdResponse"
              },
              "example": {
                "result": {
                  "status": "Completed",
                  "id": "FL_123456789"
                },
                "meta": {
                  "httpStatus": 200,
                  "requestId": "EX_123456789",
                  "notice": "Audit event API"
                }
              }
            }
          }
        },
        "403": {
          "description": "Export does not belong to the brand making the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 403,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "User not authorized",
                  "errorCode": 403
                }
              }
            }
          }
        },
        "404": {
          "description": "Export does not exist",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 404,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "Export not found",
                  "errorCode": 404
                }
              }
            }
          }
        },
        "500": {
          "description": "Unknown server error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 500,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "Unknown server error",
                  "errorCode": 500
                }
              }
            }
          }
        }
      }
    }
  },
  "/audit-exports/{exportId}/files/{fileId}": {
    "get": {
      "tags": [
        "Files"
      ],
      "summary": "Retrieves a download for an export job",
      "description": "This will download the audit events export",
      "operationId": "downloadEvents",
      "parameters": [{
          "name": "exportId",
          "in": "path",
          "description": "The id of the export job",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "fileId",
          "in": "path",
          "description": "The id of the file to download",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Downloads the audit event export",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary",
                "example": "octet-stream"
              }
            }
          }
        },
        "403": {
          "description": "Export does not belong to the brand making the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 403,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "User not authorized",
                  "errorCode": 403
                }
              }
            }
          }
        },
        "404": {
          "description": "Export does not exist",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 404,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "File not found",
                  "errorCode": 404
                }
              }
            }
          }
        },
        "500": {
          "description": "Unknown server error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaInError"
              },
              "example": {
                "httpStatus": 500,
                "requestId": "id_123456789",
                "notice": "Audit event API",
                "error": {
                  "errorMessage": "Unknown server error",
                  "errorCode": 500
                }
              }
            }
          }
        }
      }
    }
  },
  "/datasets": {
    "post": {
      "tags": [
        "Datasets"
      ],
      "summary": "Create Imported Data Project",
      "description": "<!-- theme: danger -->\n>### Deprecated Endpoint\n>This API is in the process of being deprecated. It will continue to be available. The preferred API is [Imported Data Project](../reference/imported-data-project.json), which is largely similar to this API.\n\nCreates the [Imported Data Project](https://www.qualtrics.com/support/survey-platform/my-projects/imported-data-projects) and returns the schema along with the ID of the new Imported Data Project.",
      "operationId": "postDataset",
      "requestBody": {
        "description": "Describes the Imported Data Project",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateDatasetRequest"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "The Imported Data Project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetResponse"
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              },
              "examples": {
                "Invalid Client": {
                  "value": {
                    "meta": {
                      "httpStatus": "401 - Unauthorized",
                      "error": {
                        "errorMessage": "invalid_client",
                        "errorCode": "AUTH_6.0"
                      },
                      "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "A default error response",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        }
      }
    }
  },
  "/datasets/{datasetId}": {
    "get": {
      "tags": [
        "Datasets"
      ],
      "description": "<!-- theme: danger -->\n>### Deprecated Endpoint\n>This API is in the process of being deprecated. It will continue to be available. The preferred API is [Imported Data Project](../reference/imported-data-project.json), which is largely similar to this API.\n\nRetrieves the schema of an [Imported Data Project](https://www.qualtrics.com/support/survey-platform/my-projects/imported-data-projects).\n\n<!-- theme: warning -->\n> ### Imported Data Projects Created On Web Not Visible to Datasets API\n> If you created an Imported Data Project on the Qualtrics website, you will not be able to use or modify those Imported Data Projects with the datasets API. ",
      "summary": "Get Imported Data Project",
      "operationId": "getDataset",
      "parameters": [{
        "name": "datasetId",
        "description": "Unique identifier for this Imported Data Project",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      }],
      "responses": {
        "200": {
          "description": "Retrieve the Imported Data Project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetResponse"
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              },
              "examples": {
                "Invalid Client": {
                  "value": {
                    "meta": {
                      "httpStatus": "401 - Unauthorized",
                      "error": {
                        "errorMessage": "invalid_client",
                        "errorCode": "AUTH_6.0"
                      },
                      "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "A default error response",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        }
      }
    }
  },
  "/datasets/{datasetId}/data": {
    "post": {
      "tags": [
        "Data Records"
      ],
      "description": "<!-- theme: danger -->\n>### Deprecated Endpoint\n>This API is in the process of being deprecated. It will continue to be available. The preferred API is [Imported Data Project](../reference/imported-data-project.json), which is largely similar to this API.\n\nSynchronously adds data to the [Imported Data Project](https://www.qualtrics.com/support/survey-platform/my-projects/imported-data-projects).\n\n<!-- theme: warning -->\n> ### Imported Data Projects Created On Web Not Visible to Datasets API\n> If you created Imported Data Projects on the Qualtrics website, you will not be able to use or modify those Imported Data Projects with the datasets API. ",
      "summary": "Add Data to Imported Data Project",
      "operationId": "postData",
      "requestBody": {
        "description": "Contains the data for the record being added to the Imported Data Project. This is just a simple JSON object matching the schema of the Imported Data Project.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PostDataRequest"
            },
            "examples": {
              "basic": {
                "summary": "A basic example for an IDP with four fields",
                "value": {
                  "id": "GSDGEWJKDFRT567SG",
                  "numberOfBuyers": 6,
                  "marketShare": 64,
                  "timeOfReport": "2020-05-11T20:07:43Z"
                }
              }
            }
          }
        }
      },
      "parameters": [{
        "name": "datasetId",
        "description": "Unique identifier for this Imported Data Project",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      }],
      "responses": {
        "200": {
          "description": "Data is successfully added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostDataResponse"
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              },
              "examples": {}
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              },
              "examples": {
                "Invalid Client": {
                  "value": {
                    "meta": {
                      "httpStatus": "401 - Unauthorized",
                      "error": {
                        "errorMessage": "invalid_client",
                        "errorCode": "AUTH_6.0"
                      },
                      "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "A default error response",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        }
      }
    }
  },
  "/datasets/{datasetId}/data/{id}": {
    "get": {
      "tags": [
        "Data Records"
      ],
      "description": "<!-- theme: danger -->\n>### Deprecated Endpoint\n>This API is in the process of being deprecated. It will continue to be available. The preferred API is [Imported Data Project](../reference/imported-data-project.json), which is largely similar to this API.\n\nRetrieves a data record from the [Imported Data Project](https://www.qualtrics.com/support/survey-platform/my-projects/imported-data-projects).\n\n\n<!-- theme: warning -->\n> ### Imported Data Projects Created On Web Not Visible to Datasets API\n> If you created Imported Data Projects on the Qualtrics website, you will not be able to use or modify those Imported Data Projects with the datasets API. ",
      "summary": "Get Data from Imported Data Project",
      "operationId": "getData",
      "parameters": [{
          "name": "datasetId",
          "description": "Unique identifier for this Imported Data Project",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The unique ID for the record to retrieve. This is the unique value of the field configured as the `primaryKey` for a record.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Content of requested record is returned",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataResponse"
              },
              "examples": {
                "basic": {
                  "summary": "A basic example for an IDP with four fields",
                  "value": {
                    "result": {
                      "id": "GSDGEWJKDFRT567SG",
                      "numberOfBuyers": 6,
                      "marketShare": 64,
                      "timeOfReport": "2020-05-11T20:07:43Z"
                    },
                    "meta": {
                      "requestId": "12345-67890",
                      "httpStatus": "200 - OK"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "A default error response",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "Data Records"
      ],
      "description": "<!-- theme: danger -->\n>### Deprecated Endpoint\n>This API is in the process of being deprecated. It will continue to be available. The preferred API is [Imported Data Project](../reference/imported-data-project.json), which is largely similar to this API.\n\nSynchronously deletes data from the [Imported Data Project](https://www.qualtrics.com/support/survey-platform/my-projects/imported-data-projects).\n\n<!-- theme: warning -->\n> ### Imported Data Projects Created On Web Not Visible to Datasets API\n> If you created Imported Data Projects on the Qualtrics website, you will not be able to use or modify those Imported Data Projects with the datasets API. ",
      "summary": "Delete Data from Imported Data Project",
      "operationId": "deleteData",
      "parameters": [{
          "name": "datasetId",
          "description": "Unique identifier for this Imported Data Project",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The unique ID for the record to delete. This is the unique value of the field configured as the `primaryKey` for a record.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Data is deleted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultEmptyResponse"
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              },
              "examples": {
                "Invalid Client": {
                  "value": {
                    "meta": {
                      "httpStatus": "401 - Unauthorized",
                      "error": {
                        "errorMessage": "invalid_client",
                        "errorCode": "AUTH_6.0"
                      },
                      "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "A default error response",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "Data Records"
      ],
      "description": "<!-- theme: danger -->\n>### Deprecated Endpoint\n>This API is in the process of being deprecated. It will continue to be available. The preferred API is [Imported Data Project](../reference/imported-data-project.json), which is largely similar to this API.\n\nSynchronously updates data in a [Imported Data Project](https://www.qualtrics.com/support/survey-platform/my-projects/imported-data-projects). \n\n<!-- theme: warning -->\n> ### Imported Data Project Created On Web Not Visible to Datasets API\n> If you created Imported Data Project on the Qualtrics website, you will not be able to use or modify those Imported Data Project with the datasets API. \n\n<!-- theme: danger -->\n> ### Possible Accidental Data Deletion\n> Any fields missing from the PUT body will be missing on the record after the call is executed. \n> Make sure your update has the intended result by getting the data you intend to update first, then modifying from there. ",
      "summary": "Update Data in Imported Data Project",
      "operationId": "updateData",
      "requestBody": {
        "description": "Contains the data for the row being updated in the Imported Data Project. This is just a simple JSON object matching the schema of the Imported Data Project.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PostDataRequest"
            },
            "examples": {
              "basic": {
                "summary": "A basic example for an IDP with four fields",
                "value": {
                  "id": "GSDGEWJKDFRT567SG",
                  "numberOfBuyers": 6,
                  "marketShare": 64,
                  "timeOfReport": "2020-05-11T20:07:43Z"
                }
              }
            }
          }
        }
      },
      "parameters": [{
          "name": "datasetId",
          "description": "Unique identifier for this Imported Data Project",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The unique ID for the record to create. This is the unique value of the field configured as the `primaryKey` for a record.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Data is updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultEmptyResponse"
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              },
              "examples": {
                "Invalid Client": {
                  "value": {
                    "meta": {
                      "httpStatus": "401 - Unauthorized",
                      "error": {
                        "errorMessage": "invalid_client",
                        "errorCode": "AUTH_6.0"
                      },
                      "requestId": "ba475bf2-3a9e-4895-9674-d44a2ea3bc20"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "A default error response",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultErrorResponse"
              }
            }
          }
        }
      }
    }
  },
  "/directories": {
      "get": {
          "summary": "List Directories for a Brand",
          "tags": [
              "Directories",
              "paginated"
          ],
          "description": "Using this API, the client can retrieve a list of directories with summary information for each directory. \n\nThis API is paginated, but currently returns a single page of up to 5 results and a null next page token",
          "operationId": "getDirectories",
          "responses": {
              "200": {
                  "description": "A collection of directories",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/PageOfDirectories"
                          }
                      }
                  }
              },
              "default": {
                  "description": "A default error response",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DefaultErrorResponse"
                          }
                      }
                  }
              }
          }
      }
  }
},
"components": {
  "schemas": {
    "ImportEvaluatorResponse": {
      "type": "object",
      "required": [
        "meta"
      ],
      "properties": {
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "DefaultErrorResponse": {
      "title": "Default error response",
      "description": "Default error response",
      "type": "object",
      "required": [
        "meta"
      ],
      "properties": {
        "meta": {
          "$ref": "#/components/schemas/MetaInError"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "Evaluator": {
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "properties": {
        "uniqueIdentifier": {
          "type": "string",
          "example": "uniqueID123",
          "default": "CRZ_12234455"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "uniqueIdentifier"
      ]
    },
    "Metadata": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "InputFile": {
      "properties": {
        "file": {
          "type": "string",
          "format": "binary"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "ParticipantRequest": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "uniqueIdentifier"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "nullable": true,
          "format": "email"
        },
        "username": {
          "type": "string",
          "nullable": true
        },
        "uniqueIdentifier": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "ParticipantImportBody": {
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "properties": {
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ParticipantRequest"
          }
        }
      },
      "required": [
        "participants"
      ],
      "title": ""
    },
    "ParticipantResponse": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "username",
        "userId",
        "participantId",
        "uniqueIdentifier",
        "metadata",
        "meta"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "nullable": true,
          "format": "email"
        },
        "username": {
          "type": "string",
          "nullable": true
        },
        "userId": {
          "type": "string"
        },
        "participantId": {
          "type": "string"
        },
        "uniqueIdentifier": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "SubjectRequest": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "uniqueIdentifier"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "username": {
          "type": "string",
          "nullable": true
        },
        "uniqueIdentifier": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "SubjectImportBody": {
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "properties": {
        "subjects": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/SubjectRequest"
          }
        }
      },
      "required": [
        "subjects"
      ]
    },
    "EvaluatorRequest": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "evaluatorEmail",
        "evaluatorUniqueIdentifier"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "evaluatorEmail": {
          "type": "string",
          "format": "email"
        },
        "username": {
          "type": "string",
          "nullable": true
        },
        "evaluatorUniqueIdentifier": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "SkipToken": {
        "description": "The start position for pagination",
        "title": "SkipToken",
        "type": "string",
        "x-tags": [
            "Schemas"
        ]
    },
    "PageSize": {
        "description": "The maximum number of contacts to return per request",
        "title": "PageSize",
        "type": "integer",
        "minimum": 1,
        "maximum": 5,
        "default": 5,
        "x-tags": [
            "Schemas"
        ]
    },
    "IncludeCount": {
        "description": "Parameter that determines whether to retrieve the contact count",
        "title": "IncludeCount",
        "type": "boolean",
        "x-tags": [
            "Schemas"
        ]
    },
    "DirectoryId": {
        "description": "The directory ID, also known as a pool ID",
        "example": "POOL_012345678901234",
        "title": "DirectoryId",
        "type": "string",
        "x-tags": [
            "Schemas"
        ]
    },
    "InvalidArguments": {
        "title": "InvalidArguments",
        "type": "object",
        "required": [
            "errors"
        ],
        "properties": {
            "errors": {
                "title": "Errors",
                "type": "object",
                "additionalProperties": true
            }
        },
        "x-tags": [
            "Schemas"
        ]
    },
    "PageOfDirectories": {
        "title": "PageOfDirectories",
        "type": "object",
        "required": [
            "result",
            "meta"
        ],
        "properties": {
            "result": {
                "title": "Result",
                "type": "object",
                "required": [
                    "elements"
                ],
                "properties": {
                    "elements": {
                        "title": "Elements",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SingleDirectory"
                        }
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/NextPage"
                    }
                }
            },
            "meta": {
                "title": "Meta",
                "type": "object",
                "required": [
                    "requestId",
                    "httpStatus"
                ],
                "properties": {
                    "requestId": {
                        "title": "RequestId",
                        "type": "string"
                    },
                    "httpStatus": {
                        "title": "HttpStatus",
                        "type": "string"
                    },
                    "notice": {
                        "title": "An informational string about the request.",
                        "description": "An informational string about the request.",
                        "type": "string"
                    }
                }
            }
        },
        "x-examples": {
            "example": {
                "result": {
                    "elements": [
                        {
                            "directoryId": "POOL_abcedef123",
                            "name": "newdir1",
                            "contactCount": 10,
                            "isDefault": "true",
                            "deduplicationCriteria": {
                                "email": true,
                                "firstName": false,
                                "lastName": true,
                                "externalDataReference": false,
                                "phone": false
                            }
                        },
                        {
                            "directoryId": "POOL_abcedeffgdf",
                            "name": "newdir2",
                            "contactCount": 110,
                            "isDefault": "false",
                            "deduplicationCriteria": {
                                "email": true,
                                "firstName": false,
                                "lastName": true,
                                "externalDataReference": false,
                                "phone": false
                            }
                        }
                    ],
                    "nextPage": null
                },
                "meta": {
                    "httpStatus": "200 - OK"
                }
            }
        },
        "x-tags": [
            "Schemas"
        ]
    },
    "NextPage": {
        "title": "NextPage",
        "type": "string",
        "nullable": true,
        "x-tags": [
            "Schemas"
        ]
    },
    "SingleDirectory": {
        "title": "SingleDirectory",
        "type": "object",
        "required": [
            "directoryId",
            "name",
            "contactCount",
            "isDefault"
        ],
        "properties": {
            "directoryId": {
                "$ref": "#/components/schemas/DirectoryId"
            },
            "name": {
                "$ref": "#/components/schemas/DirectoryName"
            },
            "contactCount": {
                "$ref": "#/components/schemas/DirectoryContactCount"
            },
            "isDefault": {
                "$ref": "#/components/schemas/IsDefault"
            },
            "deduplicationCriteria": {
                "$ref": "#/components/schemas/DeduplicationCriteria"
            }
        },
        "x-tags": [
            "Schemas"
        ]
    },
    "DirectoryName": {
        "title": "DirectoryName",
        "maxLength": 40,
        "type": "string",
        "nullable": true,
        "x-tags": [
            "Schemas"
        ]
    },
    "DirectoryContactCount": {
        "title": "DirectoryContactCount",
        "description": "An approximate count of the contacts in the directory.",
        "type": "integer",
        "format": "int32",
        "nullable": false,
        "x-tags": [
            "Schemas"
        ]
    },
    "IsDefault": {
        "title": "IsDefault",
        "type": "boolean",
        "nullable": false,
        "x-tags": [
            "Schemas"
        ]
    },
    "DedupOnEmail": {
        "title": "DedupOnEmail",
        "type": "boolean",
        "nullable": false,
        "x-tags": [
            "Schemas"
        ]
    },
    "DedupOnFirstName": {
        "title": "DedupOnFirstName",
        "type": "boolean",
        "nullable": false,
        "x-tags": [
            "Schemas"
        ]
    },
    "DedupOnLastName": {
        "title": "DedupOnLastName",
        "type": "boolean",
        "nullable": false,
        "x-tags": [
            "Schemas"
        ]
    },
    "DedupOnExternalDataReference": {
        "title": "DedupOnExternalDataReference",
        "type": "boolean",
        "nullable": false,
        "x-tags": [
            "Schemas"
        ]
    },
    "DedupOnPhone": {
        "title": "DedupOnPhone",
        "type": "boolean",
        "nullable": false,
        "x-tags": [
            "Schemas"
        ]
    },
    "DeduplicationCriteria": {
        "title": "DeduplicationCriteria",
        "type": "object",
        "nullable": true,
        "required": [
            "email",
            "firstName",
            "lastName",
            "externalDataReference",
            "phone"
        ],
        "properties": {
            "email": {
                "$ref": "#/components/schemas/DedupOnEmail"
            },
            "firstName": {
                "$ref": "#/components/schemas/DedupOnFirstName"
            },
            "lastName": {
                "$ref": "#/components/schemas/DedupOnLastName"
            },
            "externalDataReference": {
                "$ref": "#/components/schemas/DedupOnExternalDataReference"
            },
            "phone": {
                "$ref": "#/components/schemas/DedupOnPhone"
            }
        },
        "x-tags": [
            "Schemas"
        ]
    },
    "EvaluatorImportBody": {
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "properties": {
        "evaluators": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EvaluatorRequest"
          }
        }
      },
      "required": [
        "evaluators"
      ]
    },
    "EX360CopyRequest": {
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "properties": {
        "uniqueIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "uniqueIdentifiers"
      ]
    },
    "BatchGetParticipantResponse": {
      "type": "object",
      "required": [
        "participants",
        "meta"
      ],
      "properties": {
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Participant"
          }
        },
        "skipToken": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "Participant": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "username",
        "userId",
        "participantId",
        "uniqueIdentifier",
        "metadata"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "nullable": true,
          "format": "email"
        },
        "username": {
          "type": "string",
          "nullable": true
        },
        "userId": {
          "type": "string"
        },
        "participantId": {
          "type": "string"
        },
        "uniqueIdentifier": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "participantData": {
          "$ref": "#/components/schemas/ParticipantData"
        },
        "subjectData": {
          "$ref": "#/components/schemas/SubjectData"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "UniqueIdentifiers": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "JobTypeEnum": {
      "type": "string",
      "enum": [
        "participantExport",
        "participantImport",
        "participantDelete",
        "participantMetadataDelete",
        "participantCopy",
        "advancedSearch",
        "nominationsImport"
      ],
      "x-tags": [
        "Schemas"
      ]
    },
    "JobId": {
      "type": "object",
      "required": [
        "jobId",
        "meta"
      ],
      "properties": {
        "jobId": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "JobInfo": {
      "type": "object",
      "required": [
        "jobId",
        "jobType",
        "creationDate",
        "progressPercent",
        "meta"
      ],
      "properties": {
        "jobId": {
          "type": "string"
        },
        "jobType": {
          "$ref": "#/components/schemas/JobTypeEnum"
        },
        "creationDate": {
          "type": "string",
          "example": "Mon Jan 10 01:01:01 UTC 2022"
        },
        "progressPercent": {
          "type": "string"
        },
        "resultId": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "JobResultsBucket": {
      "type": "object",
      "required": [
        "message",
        "itemCount",
        "itemIds"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "itemCount": {
          "type": "integer",
          "format": "int32"
        },
        "itemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "JobResult": {
      "type": "object",
      "required": [
        "jobId",
        "resultId",
        "successfulCount",
        "failedCount",
        "failed"
      ],
      "properties": {
        "jobId": {
          "type": "string"
        },
        "resultId": {
          "type": "string"
        },
        "successfulCount": {
          "type": "integer",
          "format": "int32"
        },
        "failedCount": {
          "type": "integer",
          "format": "int32"
        },
        "failed": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/JobResultsBucket"
          }
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "ParticipantsSearchRequest": {
      "type": "object",
      "properties": {
        "uniqueIdentifier": {
          "type": "string"
        },
        "skipToken": {
          "type": "string"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "MetadataFilter": {
      "type": "object",
      "required": [
        "type",
        "metadataField",
        "value",
        "operator"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "metadataField": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "ParticipantExportRequest": {
      "type": "array",
      "items": {
        "$ref": "#/components/schemas/MetadataFilter"
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "ParticipantData": {
      "type": "object",
      "properties": {
        "respondent": {
          "type": "string"
        },
        "complete": {
          "type": "string"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "SubjectData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "nominationsSent": {
          "type": "string"
        },
        "evaluationsReceived": {
          "type": "string"
        },
        "nominationsReceived": {
          "type": "string"
        },
        "completedEvaluations": {
          "type": "string"
        },
        "selfEvaluationComplete": {
          "type": "string"
        },
        "external": {
          "type": "string"
        },
        "reportAvailable": {
          "type": "string"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "ProjectIdsResponse": {
      "type": "object",
      "required": [
        "projectIds",
        "meta"
      ],
      "properties": {
        "projectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "EventListResponse": {
      "type": "object",
      "required": [
        "result",
        "meta"
      ],
      "properties": {
        "result": {
          "type": "object",
          "required": [
            "elements"
          ],
          "properties": {
            "elements": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "description",
                  "category"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "user_page_main_view"
                  },
                  "description": {
                    "type": "string",
                    "example": "A user has viewed the main landing page of the users tab"
                  },
                  "category": {
                    "type": "string",
                    "example": "Admin"
                  }
                }
              }
            }
          }
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      }
    },
    "ExportRequestBody": {
      "type": "object",
      "required": [
        "eventName",
        "startDate"
      ],
      "properties": {
        "eventName": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "example": "UR_123456789"
        },
        "startDate": {
          "type": "string",
          "example": "2022-01-15T19:23:51Z"
        },
        "endDate": {
          "type": "string",
          "example": "2022-01-16T19:23:51Z",
          "description": "If this is not present it will default to the current time. If the current time is not in the same calendar month as the startDate this will throw a 400 error."
        }
      }
    },
    "CreateExportResponse": {
      "type": "object",
      "required": [
        "result",
        "meta"
      ],
      "properties": {
        "result": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      }
    },
    "GetExportByIdResponse": {
      "type": "object",
      "required": [
        "result",
        "meta"
      ],
      "properties": {
        "result": {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "In Progress",
                "Pending",
                "Completed",
                "Failed"
              ],
              "example": "Completed"
            },
            "fileId": {
              "type": "string",
              "example": "FL_123456789"
            }
          }
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      }
    },
    "Meta": {
      "title": "Meta",
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "description": "",
      "properties": {
        "httpStatus": {
          "title": "http status",
          "type": "string",
          "description": "HTTP status code."
        },
        "requestId": {
          "title": "An identifier of the incoming request.",
          "type": "string",
          "description": "Unique identifier for the associated request."
        },
        "notice": {
          "title": "An informational string about the request.",
          "type": "string",
          "description": "Additional information about this response."
        }
      },
      "required": [
        "httpStatus",
        "requestId"
      ]
    },
    "MetaInError": {
      "title": "Meta with Error",
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "description": "",
      "properties": {
        "httpStatus": {
          "title": "http status",
          "type": "string",
          "description": "HTTP status code."
        },
        "requestId": {
          "title": "An identifier of the incoming request.",
          "type": "string",
          "description": "Unique identifier for this request."
        },
        "notice": {
          "title": "An informational string about the request.",
          "type": "string",
          "description": "Additional information about this response."
        },
        "error": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "required": [
        "httpStatus",
        "requestId",
        "error"
      ]
    },
    "Error": {
      "title": "Error",
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "description": "",
      "properties": {
        "errorMessage": {
          "title": "Detail error message.",
          "type": "string",
          "description": "HTTP error message."
        },
        "errorCode": {
          "title": "Unique error code of a cause.",
          "type": "string",
          "description": "HTTP error code."
        }
      },
      "required": [
        "errorMessage",
        "errorCode"
      ]
    },
    "DefaultEmptyResponse": {
      "title": "Default empty response",
      "type": "object",
      "required": [
        "meta"
      ],
      "properties": {
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "description": "",
      "x-tags": [
        "Schemas"
      ]
    },
    "CreateDatasetRequest": {
      "title": "Dataset",
      "type": "object",
      "x-examples": {
        "example": {
          "name": "keyMetrics",
          "primaryKey": "id",
          "createProject": false,
          "fields": [{
              "name": "id",
              "type": "string"
            },
            {
              "name": "region",
              "type": "string"
            },
            {
              "name": "age",
              "type": "integer"
            },
            {
              "name": "transactions",
              "type": "array"
            },
            {
              "name": "transactionTimeStamp",
              "type": "string",
              "format": "date-time"
            }
          ]
        }
      },
      "x-tags": [
        "Schemas"
      ],
      "properties": {
        "datasetId": {
          "title": "datasetId",
          "type": "string",
          "description": "Unique identifier for this Imported Data Project. If you provide this value, the service uses it as the id of the Imported Data Project. If not provided, the service generates an id. The id must match this regular expression: `^[a-zA-Z0-9_]{1,32}$`. Using this id ensures idempotency when creating a DataSource."
        },
        "name": {
          "title": "name",
          "type": "string",
          "description": "Name of the Imported Data Project."
        },
        "primaryKey": {
          "title": "primaryKey",
          "type": "string",
          "description": "Name of the data field that uniquely identifies each record. Can be later used to identify specific records when acting upon those records with the API. For example, if each row is identified by a field called `contactId`, set the primaryKey to `contactId`. Make sure your `primaryKey` does not have duplicate values. `primaryKey` is case sensitive."
        },
        "createProject": {
          "title": "createProject",
          "type": "boolean",
          "default": false,
          "description": "Set this to true to create a visible project in the UI for this Imported Data Project."
        },
        "fields": {
          "title": "fields",
          "type": "array",
          "description": "Fields in the Imported Data Project.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "title": "name",
                "type": "string",
                "description": "Name of the field."
              },
              "type": {
                "title": "type",
                "type": "string",
                "enum": [
                  "integer",
                  "string",
                  "array"
                ],
                "description": "Data type of field."
              },
              "format": {
                "title": "format",
                "type": "string",
                "description": "Enforces formatting for your string values. If you set the format to date-time, the API will enforce that all strings for this field are in the ISO-8601 date-time format.",
                "enum": [
                  "date-time"
                ]
              }
            }
          }
        }
      }
    },
    "Dataset": {
      "title": "Dataset",
      "type": "object",
      "x-examples": {
        "example": {
          "name": "keyMetrics",
          "primaryKey": "ID",
          "createProject": false,
          "fields": [{
              "name": "numberOfBuyers",
              "type": "integer"
            },
            {
              "name": "marketShare",
              "type": "integer"
            }
          ]
        }
      },
      "x-tags": [
        "Schemas"
      ],
      "properties": {
        "name": {
          "title": "name",
          "type": "string",
          "description": "Name of the Imported Data Project."
        },
        "primaryKey": {
          "title": "primaryKey",
          "type": "string",
          "description": "Name of the data field that uniquely identifies each record. Can be later used to identify specific records when acting upon those records with the API. For example, if each row is idenfied by a field called `contactId`, set the primaryKey to `contactId`. Make sure your `primaryKey` does not have duplicate values. `primaryKey` is case sensitive."
        },
        "datasetId": {
          "title": "datasetId",
          "type": "string",
          "description": "Unique identifier for this Imported Data Project. If you provide this value, the service uses it as the id of the Imported Data Project. If not provided, the service generates an id. The id must match this regular expression: `^[a-zA-Z0-9_]{1,32}$`. Using this id ensures idempotency when creating a DataSource."
        },
        "datasetType": {
          "title": "datasetType",
          "type": "string",
          "description": "Data type for the imported data set."
        },
        "fields": {
          "title": "fields",
          "type": "array",
          "description": "Fields in the imported data sets.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "title": "name",
                "type": "string",
                "description": "Name of the field."
              },
              "type": {
                "title": "type",
                "type": "string",
                "enum": [
                  "integer",
                  "string",
                  "array"
                ],
                "description": "Data type for the field."
              },
              "format": {
                "title": "format",
                "type": "string",
                "enum": [
                  "date-time"
                ],
                "description": "Enforces formatting for your string values. If you set the format to date-time, the API will enforce that all strings for this field are in the ISO-8601 date-time format."
              }
            }
          }
        }
      }
    },
    "DatasetResponse": {
      "title": "DatasetResponse",
      "type": "object",
      "required": [
        "result",
        "meta"
      ],
      "properties": {
        "result": {
          "$ref": "#/components/schemas/Dataset"
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "x-examples": {
        "example": {
          "result": {
            "datasetId": "DSRC_IUYHJKL",
            "name": "keyMetrics",
            "primaryKey": "id",
            "fields": [{
                "name": "id",
                "type": "string"
              },
              {
                "name": "numberOfBuyers",
                "type": "integer"
              },
              {
                "name": "marketShare",
                "type": "integer"
              }
            ]
          },
          "meta": {
            "requestId": "12345-67890",
            "httpStatus": "200 - OK"
          }
        }
      },
      "x-tags": [
        "Schemas"
      ]
    },
    "PostDataResponse": {
      "title": "PostDataResponse",
      "type": "object",
      "x-examples": {
        "example": {
          "result": {
            "id": "GSDGEWJKDFRT567SG"
          },
          "meta": {
            "requestId": "12345-67890",
            "httpStatus": "200 - OK"
          }
        }
      },
      "x-tags": [
        "Schemas"
      ],
      "description": "",
      "properties": {
        "meta": {
          "$ref": "#/components/schemas/Meta"
        },
        "result": {
          "title": "Result",
          "type": "object",
          "description": "Result of the request.",
          "properties": {
            "id": {
              "title": "id",
              "type": "string",
              "description": "Unique identifier for the response."
            }
          }
        }
      },
      "required": [
        "meta"
      ]
    },
    "PostDataRequest": {
      "title": "PostDataRequest",
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "minProperties": 1,
      "additionalProperties": true
    },
    "GetDataResponse": {
      "title": "GetDataResponse",
      "type": "object",
      "x-tags": [
        "Schemas"
      ],
      "description": "",
      "properties": {
        "meta": {
          "$ref": "#/components/schemas/Meta"
        },
        "result": {
          "title": "Result",
          "type": "object",
          "description": "Content of the retrieved row from the Imported Data Project",
          "additionalProperties": true
        }
      }
    },
    "ImportedDataProjectRecord": {
      "title": "Imported Data Project Record",
      "description": "Contents of an Imported Data Project Record",
      "oneOf": [{
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [{
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    "PostJobResponse": {
      "title": "PostJobResponse",
      "type": "object",
      "x-examples": {
        "example": {
          "result": {
            "x_jwt": "SDFTYERJKV",
            "href": "https://yourdatacenter/file-loader/fieldsetStore",
            "jobId": "PRGR_DGDSEW675"
          },
          "meta": {
            "requestId": "12345-67890",
            "httpStatus": "200 - OK"
          }
        }
      },
      "x-tags": [
        "Schemas"
      ],
      "description": "",
      "properties": {
        "result": {
          "title": "Result",
          "type": "object",
          "required": [
            "x_jwt",
            "href",
            "jobId"
          ],
          "description": "Response results.",
          "properties": {
            "x_jwt": {
              "title": "jwt",
              "type": "string",
              "description": "JSON web token."
            },
            "href": {
              "title": "href",
              "type": "string",
              "description": "Link or URL"
            },
            "jobId": {
              "title": "jobId",
              "type": "string",
              "description": "Unique identifier for this job."
            }
          }
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "required": [
        "result",
        "meta"
      ]
    },
    "FileImportProgressResponse": {
      "title": "FileImportProgressResponse",
      "type": "object",
      "x-examples": {
        "example": {
          "result": {
            "jobId": "PRGR_SDGY45DSF",
            "status": "IN_PROGRESS"
          },
          "meta": {
            "httpStatus": "200 - OK",
            "requestId": "12345-67890"
          }
        }
      },
      "x-tags": [
        "Schemas"
      ],
      "description": "",
      "properties": {
        "result": {
          "title": "Result",
          "type": "object",
          "description": "Response results.",
          "properties": {
            "jobId": {
              "title": "Id",
              "type": "string",
              "description": "Unique identifier for this job."
            },
            "status": {
              "title": "status",
              "type": "string",
              "description": "Status of this job."
            }
          }
        },
        "meta": {
          "$ref": "#/components/schemas/Meta"
        }
      },
      "required": [
        "result",
        "meta"
      ]
    }
  }
}
}
